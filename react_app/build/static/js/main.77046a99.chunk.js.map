{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","askQuestion","event","preventDefault","question","document","getElementById","value","console","log","setState","ask","requestAnswer","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","res","json","data","answer","sentence","url","askAgain","state","bind","assertThisInitialized","react_default","a","createElement","style","display","justifyContent","alignItems","onSubmit","autoComplete","flexDirection","id","type","name","maxWidth","paddingLeft","paddingRight","href","onClick","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MA2DeA,cAxDd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMLQ,YAAc,SAACC,GACVA,EAAMC,iBACN,IAAIC,EAAWC,SAASC,eAAe,YAAYC,MACnDC,QAAQC,IAAI,yDAA2DL,GACzEV,EAAKgB,SAAS,CAACN,SAAUA,EAAUO,KAAK,GAAQjB,EAAKkB,cAAcR,KAXrDV,EAchBkB,cAAgB,SAACR,GACbI,QAAQC,IAAI,2CAA6CL,GAEzDS,MAAM,YAAa,CACfC,OAAQ,OACRC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBhB,SAAUA,MAGbiB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SACvBF,KAAK,SAAAG,GAA2B,OAAlBhB,QAAQC,IAAIe,GAAaA,IAChCH,KAAK,SAAAG,GAAI,OAAI9B,EAAKgB,SAAS,CAACe,OAAQD,EAAKC,OAAOC,SAAUC,IAAKH,EAAKC,OAAOE,SA7BpEjC,EAgChBkC,SAAW,SAAC1B,GACRR,EAAKgB,SAAS,CAACC,KAAK,EAAMP,SAAU,QA/B1CV,EAAKmC,MAAQ,CAAClB,KAAK,EAAMP,SAAU,KAAMqB,QAAQ,EAAOE,IAAK,MAC3DjC,EAAKO,YAAcP,EAAKO,YAAY6B,KAAjBnC,OAAAoC,EAAA,EAAApC,QAAAoC,EAAA,EAAApC,CAAAD,KACjBA,EAAKkB,cAAgBlB,EAAKkB,cAAckB,KAAnBnC,OAAAoC,EAAA,EAAApC,QAAAoC,EAAA,EAAApC,CAAAD,KAJPA,wEAqClB,OACCsC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WAEjEzC,KAAKgC,MAAMlB,IAAMqB,EAAAC,EAAAC,cAAA,QAAMK,SAAU1C,KAAKI,YAAauC,aAAa,MAAML,MAAO,CAACC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUG,cAAe,WAChKT,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,SAAOQ,GAAG,WAAWC,KAAK,OAAOC,KAAK,cAGhCZ,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAUG,cAAe,WACzFT,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAIrC,KAAKgC,MAAMzB,WACrB4B,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACU,SAAU,QAASC,YAAa,MAAOC,aAAc,QAASlD,KAAKgC,MAAMJ,OAASO,EAAAC,EAAAC,cAAA,KAAGc,KAAMnD,KAAKgC,MAAMF,KAAM9B,KAAKgC,MAAMJ,QAAc,WACnJO,EAAAC,EAAAC,cAAA,QAAMe,QAASpD,KAAK+B,SAAUO,MAAO,CAACe,MAAO,SAASlB,EAAAC,EAAAC,cAAA,2CAjDlDiB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASvD,SAASC,eAAe,SDmH3C,kBAAmBuD,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC","file":"static/js/main.77046a99.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {ask: true, question: null, answer: false, url: null};\n\t\t  this.askQuestion = this.askQuestion.bind(this);\n      this.requestAnswer = this.requestAnswer.bind(this);\n\t}\n\n\t  askQuestion = (event) => {\n        event.preventDefault();\n        let question = document.getElementById(\"question\").value;\n        console.log(\"We're in the askQuestion method where the question is \" + question);\n\t\t    this.setState({question: question, ask: false}, this.requestAnswer(question));\n\t  }\n\n    requestAnswer = (question) => {\n        console.log(\"We're going to be posting the question: \" + question);\n        // here we're going to make a request to the server with the question text (probably in json format) and receive the answer to the question\n        fetch('/question', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                question: question,\n            })\n        })\n            .then(res => res.json())\n\t    .then(data => {console.log(data);return data})\n            .then(data => this.setState({answer: data.answer.sentence, url: data.answer.url}));\n    }\n\n    askAgain = (event) => {\n        this.setState({ask: true, question: null});\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n\t\t\t{\n\t\t\t\t  this.state.ask ? <form onSubmit={this.askQuestion} autoComplete=\"off\" style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\"}}>\n\t\t\t\t<span>What would you like to know?</span>\n\t\t\t\t<input id=\"question\" type=\"text\" name=\"question\"/>\n\t\t\t\t</form>\n\t\t\t\t: \n\t\t\t\t      <div style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\"}}>\n              <span><b>{this.state.question}</b></span>\n              <span style={{maxWidth: \"900px\", paddingLeft: \"1em\", paddingRight: \"1em\"}}>{this.state.answer ? <a href={this.state.url}>{this.state.answer}</a> : \"Loading\"}</span>\n              <span onClick={this.askAgain} style={{color: \"grey\"}}><i>Ask another question</i></span>\n              </div>\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}